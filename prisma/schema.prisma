generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}


model User {
  id            String          @id @default(cuid())
  name          String?
  email         String @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  urls     Url[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}





model Url {
  id            String          @id @default(cuid())
  originalUrl String
  shortUrl    String    @unique
  clickCount  Int       @default(0)
  createdAt   DateTime  @default(now())
  expiresAt   DateTime?
  name        String?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  clicks      Click[]
  qrCodes     QrCode[]
}

model Click {
  id            String          @id @default(cuid())
  urlId     String
  clickedAt DateTime @default(now())
  userAgent String?
  ipAddress String?
  country   String?
  device    String?
  referer   String?
  os_system String?
  url       Url      @relation(fields: [urlId], references: [id])
  isBot     Boolean?
  isScan    Boolean?
}

model QrCode {
  id            String          @id @default(cuid())
  urlId       String
  qrCodeImage String
  generatedAt DateTime @default(now())
  url         Url      @relation(fields: [urlId], references: [id])
}
